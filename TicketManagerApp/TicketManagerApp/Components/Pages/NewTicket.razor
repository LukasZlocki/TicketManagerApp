@page "/newticket"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using TicketManager.Models.Models
@using TicketManagerApp.Data
@using TicketManagerApp.Services

@inject ILabLocationService LabLocationService
@inject IFactoryLocationService FactoryLocationService
@inject IProductService _productService
@inject IProductFamilyService ProductFamilyService
@inject IDepartmentService DepartmentSerivce
@inject IProductTypeService ProductTypeService
@inject IProductDisplacementService ProductDisplacementService
@inject ITestService TestService
@inject ITestParameterServices TestParameterService
@inject ITicketService TicketService
@inject IUserService _userService
@inject IReportTypeService _reportTypeService

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager Navigation

@attribute [Authorize]

<!--
 Basic user data form
-->
<h3>Add Ticket</h3>
<br>
<form>
    <div class="form-group">
        <label for="inputLabolatoryLocation">Lab location</label>
        <select id="inputLabolatoryLocation" class="form-control" asp-items @onchange="OnLabLocationChanged">
            <option selected>Choose labolatory location...</option>
            <option>...</option>
            @foreach (var item in LabolatoryLocationsDedicatedList)
            {
                <option value="@item.LabLocationId">@item.Country</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputProductFamily">Product family</label>
        <select id="inputProductFamily" class="form-control" asp-items @onchange="OnProductFamilyChanged">
            >
            <option selected>Choose product family...</option>
            <option>...</option>
            @foreach (var item in ProductFamiliesDedicatedList)
            {
                <option value="@item.ProductFamilyId">@item.FamilyDescription</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputProductType">Product type</label>
        <select id="inputProductType" class="form-control" asp-items @onchange="OnProductTypeChanged">
            <option selected>Choose product type...</option>
            <option>...</option>
            @foreach (var item in ProductTypesDedicatedList)
            {
                <option value="@item.ProductTypeId">@item.ProductTypeDesc</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputProductDisplacement">Product displacement</label>
        <select id="inputProductDisplacement" class="form-control" asp-items @onchange="OnProductDisplacementChanged">
            <option selected>Choose product type...</option>
            <option>...</option>
            @foreach (var item in ProductDisplacementsDedicatedList)
            {
                <option value="@item.ProductDisplacementId">@item.Displacement</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="inputReportType">Report Type</label>
        <select id="inputReportType" class="form-control" asp-items @onchange="OnReportTypeChanged">
            <option selected>Choose report type...</option>
            <option>...</option>
            @foreach (var item in ReportTypesDedicatedList)
            {
                <option value="@item.ReportTypeId">@item.ReportShortType</option>
            }
        </select>
    </div>
</form>

<!--
 Custom file form
-->
<br>
<br>
<h2>Custom file:</h2>
<br>
@if (isAddCustomFileButtonVisible == true)
{
    <button class="btn-secondary btn-sm" @onclick="() => AddCustomFile()"> + </button>
    <br>
}
else
{
    // no showing button with adding test
    <button class="btn-secondary btn-sm" @onclick="() => RollUpCustomFileTable()"> - </button>
    <br>
}

@if (isAddCustomFileTableVisible)
{
    <table class="table boarder table-hover">
        <tbody>
            <tr>
                <td style="background-color: orange;">
                    <InputFile OnChange="HandleFileSelected" />
                </td>
            </tr>
        </tbody>
    </table>
}

<!--
 Test request form
-->
<br>
<br>
<h3>Tests request:</h3>
<br>
@if (isAddNewTestButtonVisible == true)
{
    <button class="btn-secondary btn-sm" @onclick="() => AddNewTestToTicketTestsList()"> + </button>
    <br>
}
else
{
    // showing button with adding test
    <button class="btn-secondary btn-sm" @onclick="() => RollUpNewTestTable()"> - </button>
    <br>
}

@if (isAddCustomFileTableVisible)
{

}

@if (isAddTestTableVisible == false)
{
    // show nothing
}
else
{
    <div class="border-bottom border-white shadow rounded-lg col-md-6" style="backgoround-color: #ededed">
        <table class="table table-striped boarder table-hover">
            <tr>
                <th>Test Description</th>
                <th>Units</th>
            </tr>
            <tbody>
            <td>
                <div class="form-group">
                    <select id="inputTest" class="form-control" asp-items @onchange="OnTestPickedChanged">
                        <option selected>@(string.IsNullOrEmpty(UserTicketTestVM.Test?.TestDescription) ? "... choose test ..." : UserTicketTestVM.Test.TestDescription)</option>
                        <option>...</option>
                            @foreach (var test in TestsDedicatedList)
                            {
                            <option value="@test.TestId">@test.TestDescription</option>
                            }
                    </select>
                </div>
            </td>
            <td>
                <div class="form-group">
                    <input type="text" class="form-control" id="formTestUnits" placeholder="@UserTicketTestVM.Test.TestUnits" readonly>
                </div>
            </td>
            </tbody>
        </table>
    </div>
    <br>

    <!--
     Parameters request form
    -->
    <div class="border-bottom border-white shadow rounded-lg col-md-6" style="background-color: #ededed">
        <table class="table table-striped boarder table-hover">
            <tr>
                <th>Parameter</th>
                <th>Value</th>
                <th>Units</th>
            </tr>
            <tbody>
                @if (UserTicketTestVM.TicketTestParameters == null)
                {
                    <p><em>No parameters added.</em></p>
                }
                else
                {
                    @foreach (var test in UserTicketTestVM.TicketTestParameters)
                    {
                        <tr>
                            <td>@test.TestParameter.ParameterDescription</td>
                            <td>
                                <input type="text" class="form-control" id="formTestParameterValue" placeholder="Add parameter value" @bind="test.ParameterValue">
                            </td>
                            <td>@test.TestParameter.ParameterUnit</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <br>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="AddTestAndItsParametersToThisTicket">Add test and parameters</button>
    </div>

}

<!--
 List with picked tests
-->
<br>
<br>
<h3>Summary tests request:</h3>
<br>
<div class="border-bottom border-white shadow rounded-lg" style="background-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Test Description</th>
            <th>Units</th>
            <th>Test parameter</th>
            <th>Action</th>
        </tr>
        <tbody>
            @if (UserTicketVM.TicketTests == null)
            {
                <p><em>No tests added.</em></p>
            }
            else
            {
                @foreach (var test in UserTicketVM.TicketTests)
                {
                    <tr>
                        <td>@test.Test.TestDescription</td>
                        <td>@test.Test.TestUnits</td>
                        <td>
                            @foreach (var parameter in test.TicketTestParameters)
                            {
                                <label for="summaryinfo">
                                    @parameter.TestParameter.ParameterDescription
                                    @parameter.ParameterValue
                                    @parameter.TestParameter.ParameterUnit
                                </label>
                                <br>
                            }
                        </td>
                        <td>
                            <button class="btn-secondary btn-sm" @onclick="() => EditTestFromList(test)">Edit</button>
                            <button class="btn-danger btn-sm" @onclick="() => RemoveTestFromList(test)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<br>
<div class="form-group">
    @if (CheckIfAllPickingListsPicked())
    {
        <button class="btn btn-primary" @onclick="CreateTicketRequest">Create ticket</button>
    }
    else
    {
        <button class="btn btn-dark" @onclick="NotReadyToCreateTicketRequest">Create ticket</button>
        <p>@message</p>
    }
</div>



@code {

    // This model service ticket activities on this page.
    private Ticket UserTicketVM = new Ticket
        {
            TicketTests = new List<TicketTest>(),
            RequestorDepartment = new(),
            LabLocation = new(),
            Product = new(),
            TicketStatus = new()
        };

    // This model service ticket tests activities on this page.
    private TicketTest UserTicketTestVM = new TicketTest
        {
            TicketTestParameters = new List<TicketTestParameter>(),
            Test = new()
        };

    string? UserEmail;
    int UserDepartmentId;
    int UserFactoryId;

    List<LabLocation> LabolatoryLocationsDedicatedList = new List<LabLocation>();
    List<ProductFamily> ProductFamiliesDedicatedList = new List<ProductFamily>();
    List<ProductType> ProductTypesDedicatedList = new List<ProductType>();
    List<ProductDisplacement> ProductDisplacementsDedicatedList = new List<ProductDisplacement>();
    List<Test> TestsDedicatedList = new List<Test>();
    List<TestParameter> TestParametersDedicatedList = new List<TestParameter>();
    List<ReportType> ReportTypesDedicatedList = new List<ReportType>();

    private bool isAddTestTableVisible = false;
    private bool isAddNewTestButtonVisible = true;

    private bool isAddCustomFileTableVisible = false;
    private bool isAddCustomFileButtonVisible = true;

    // bools to establish is user picked parameter from drop down list
    private bool isLabLocationPicked = false;
    private bool isProductFamilyPicked = false;
    private bool isproductTypePicked = false;
    private bool isProductDisplacementPicked = false;
    private bool isReportTypePicked = false;

    // For massaging purpose
    private string message;

    // For selecting file purpose
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        // Retrive user data by user guid
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (Guid.TryParse(userId, out Guid _userGuid))
        {
            UserDepartmentId = await _userService.GetUserDepartmentIdByUserId(_userGuid);
            UserFactoryId = await _userService.GetUserFactoryIdByUserId(_userGuid);
            UserEmail = await _userService.GetUserEmailByUserId(_userGuid);
        }

        LabolatoryLocationsDedicatedList = await LabLocationService.GetAllLabLocations();
        ProductFamiliesDedicatedList = await ProductFamilyService.GetAllProductFamilies();
    }

    private async Task LoadProductTypeDedicatedListByProductFamilyId(int productFamilyId)
    {
        // load ProductTypes base on product family primary key
        ProductTypesDedicatedList = await ProductTypeService.GetAllProductTypesByFamilyId(productFamilyId);
    }

    private async Task LoadDedicatedProductDisplacements(int productTypeId)
    {

        ProductDisplacementsDedicatedList = await ProductDisplacementService.GetProductDisplacementsByProductTypeId(productTypeId);
    }

    private async Task LoadDedicatedTestsByProductFamilyIdAndLabLocationId(int productFamilyId, int LabLocationId)
    {
        // Get Test by familly and lab location
        TestsDedicatedList = await TestService.GetTestsByProductFamilyIdAndLabLocationId(productFamilyId, LabLocationId);
    }

    private async Task LoadDedicatedTestParametersByTestId(int testId)
    {
        TestParametersDedicatedList = await TestParameterService.GetTestParametersByTestId(testId);
        UserTicketTestVM.TicketTestParameters = ConvertTestParametersDedicatedListToTicketTestList(TestParametersDedicatedList);
    }

    private async Task OnProductTypeChanged(ChangeEventArgs e)
    {
        isproductTypePicked = true;

        ResetAllPickingListsBelowCountingFromThisList("ProductTypeList");

        if (int.TryParse(e.Value.ToString(), out int productTypeId))
        {
            UserTicketVM.Product.ProductTypeId = productTypeId;
            await LoadDedicatedProductDisplacements(UserTicketVM.Product.ProductTypeId);
            await LoadDedicatedTestsByProductFamilyIdAndLabLocationId(UserTicketVM.Product.ProductFamilyId, UserTicketVM.LabLocationId);
        }
    }

    private async Task OnProductFamilyChanged(ChangeEventArgs e)
    {
        isProductFamilyPicked = true;

        ResetAllPickingListsBelowCountingFromThisList("ProductFamilyList");

        if (int.TryParse(e.Value.ToString(), out int productFamilyId))
        {
            UserTicketVM.ProductId = productFamilyId;
            UserTicketVM.Product.ProductFamilyId = productFamilyId;
            // Reseting product family picking list

            await LoadProductTypeDedicatedListByProductFamilyId(UserTicketVM.Product.ProductFamilyId);

            // load report type list
            ReportTypesDedicatedList = await _reportTypeService.GetReportTypesByProdcutFamilyId(productFamilyId);
        }

    }

    private async Task OnTestPickedChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value.ToString(), out int testId))
        {
            // picked test chosen from list of dedicated tests by user
            UserTicketTestVM.Test = TestsDedicatedList.Find(id => id.TestId == testId) ?? new Test();
            UserTicketTestVM.TestId = testId;
            await LoadDedicatedTestParametersByTestId(testId);
        }
    }

    private async Task OnLabLocationChanged(ChangeEventArgs e)
    {
        isLabLocationPicked = true;

        // Do not reset picking list here - data have been already loaded.
        //ResetAllPickingListsBelowCountingFromThisList("LabLocationList");

        if (int.TryParse(e.Value.ToString(), out int labLocationId))
        {
            UserTicketVM.LabLocationId = labLocationId;
        }
    }

    private async Task OnProductDisplacementChanged(ChangeEventArgs e)
    {
        isProductDisplacementPicked = true;

        ResetAllPickingListsBelowCountingFromThisList("ProductDisplacementlist");

        if (int.TryParse(e.Value.ToString(), out int productDisplacementId))
        {
            UserTicketVM.Product.ProductDisplacementId = productDisplacementId;
        }
    }

    private async Task OnReportTypeChanged(ChangeEventArgs e)
    {
        isReportTypePicked = true;

        if (int.TryParse(e.Value.ToString(), out int reportTypeId))
        {
            UserTicketVM.ReportTypeId = reportTypeId;
        }
    }

    /// <summary>
    /// Reset picking list along with status if picked
    /// </summary>
    /// <param name="pickingListName"></param>
    private void ResetAllPickingListsBelowCountingFromThisList(string pickingListName)
    {
        if (pickingListName == "LabLocationList")
        {
            ResetListAndPickedStatus(false, true, true, true, true);
        }

        if (pickingListName == "ProductFamilyList")
        {
            ResetListAndPickedStatus(false, false, true, true, true);
        }

        if (pickingListName == "ProductTypeList")
        {
            ResetListAndPickedStatus(false, false, false, true, false);
        }

        if (pickingListName == "ProductDisplacementList")
        {
            ResetListAndPickedStatus(false, false, false, false, false);
        }
    }

    private void ResetListAndPickedStatus(bool resetLabLocationlist, bool resetProductFamilyList, bool resetProductTypeList, bool resetProductDisplacementlist, bool resetReportTypeList)
    {
        if (resetLabLocationlist)
        {
            // Clear picking lists
            ProductTypesDedicatedList.Clear();
            // Deactivate picked status
            isproductTypePicked = false;
        }
        if (resetProductFamilyList)
        {
            // Clear picking lists
            ProductFamiliesDedicatedList.Clear();
            // Deactivate picked status
            isProductFamilyPicked = false;

        }
        if (resetProductTypeList)
        {
            // Clear picking lists
            ProductTypesDedicatedList.Clear();
            // Deactivate picked status
            isproductTypePicked = false;
        }
        if (resetProductDisplacementlist)
        {
            // Clear picking lists
            ProductDisplacementsDedicatedList.Clear();
            // Deactivate picked status
            isProductDisplacementPicked = false;

        }
        if (resetReportTypeList)
        {
            // Clear picking lists
            ReportTypesDedicatedList.Clear();
            // Deactivate picked status
            isReportTypePicked = false;
        }
    }

    private void AddTestAndItsParametersToThisTicket()
    {
        isAddTestTableVisible = false; // not showing table with test parameters
        isAddNewTestButtonVisible = true; // showing button to add new test parameters

        AddOrEditTestFromTestsList(UserTicketTestVM);

        // reseting user ticket to reset adding test and its parameters value
        UserTicketTestVM = new TicketTest
            {
                TicketTestParameters = new List<TicketTestParameter>(),
                Test = new()
            };
    }

    /// <summary>
    /// Convert TestParameters dedicated list to TicketList
    /// </summary>
    /// <param name="TestParametersDedicatedList"></param>
    /// <returns></returns>
    private List<TicketTestParameter> ConvertTestParametersDedicatedListToTicketTestList(List<TestParameter> testParametersDedicatedList)
    {
        List<TicketTestParameter> _convertedTicketTestParametersList = new();
        foreach (var testParameter in testParametersDedicatedList)
        {
            TicketTestParameter _testParameter = new();
            _testParameter.ParameterValue = "";
            _testParameter.TestParameterId = testParameter.TestParameterId;
            _testParameter.TestParameter = testParameter;

            _convertedTicketTestParametersList.Add(_testParameter);
        }

        return _convertedTicketTestParametersList;
    }

    private void RemoveTestFromList(TicketTest test)
    {
        int _index = UserTicketVM.TicketTests.FindIndex(t => t.Equals(test));
        UserTicketVM.TicketTests.RemoveAt(_index);
    }

    private void AddOrEditTestFromTestsList(TicketTest test)
    {
        int _index = UserTicketVM.TicketTests.FindIndex(t => t.Equals(test));

        if (_index != -1)
        {
            UserTicketTestVM = UserTicketVM?.TicketTests?[_index]; // ticket found edit of ticket available
        }
        else
        {
            // ticket doeasn't exist new ticket is added to ticket test list
            UserTicketVM.TicketTests.Add(UserTicketTestVM); // addding new test
        }
    }

    private void EditTestFromList(TicketTest test)
    {
        isAddTestTableVisible = true;
        AddOrEditTestFromTestsList(test);
    }

    private async Task CreateTicketRequest()
    {
        // Add user basic data to ticket
        UserTicketVM.RequestorEmail = UserEmail;
        UserTicketVM.DepartmentId = UserDepartmentId;
        UserTicketVM.RequestorDepartment.FactoryLocationId = UserFactoryId;

        // Get ProductID base on ProductFamilyId, ProductTypeId, DisplacmentId
        try
        {
            int _productId = await _productService.GetProductId(UserTicketVM.Product.ProductFamilyId, UserTicketVM.Product.ProductTypeId, UserTicketVM.Product.ProductDisplacementId);
            UserTicketVM.ProductId = _productId;
        }
        catch (Exception ex)
        {
            // Log the exception and handle it appropriately
            Console.WriteLine($"An error occurred while creating the ticket: {ex.Message}");
        }

        try
        {
            var ticket = await TicketService.CreateTicket(UserTicketVM);
            if (ticket != null)
            {
                Navigation.NavigateTo("/ticketmanagerapp/", true);
            }
            else
            {
                // Handle the case where ticket creation failed but no exception was thrown
                Console.WriteLine("Ticket creation failed.");
            }
        }
        catch (Exception ex)
        {
            // Log the exception and handle it appropriately
            Console.WriteLine($"An error occurred while creating the ticket: {ex.Message}");
        }
    }

    private void AddNewTestToTicketTestsList()
    {
        isAddTestTableVisible = true; // show table with test parameters
        isAddNewTestButtonVisible = false; // not showing add new test button
    }

    private void AddCustomFile()
    {
        isAddCustomFileTableVisible = true;
        isAddCustomFileButtonVisible = false;
    }


    private bool CheckIfAllPickingListsPicked()
    {
        if (isLabLocationPicked && isProductFamilyPicked && isproductTypePicked && isProductDisplacementPicked && isReportTypePicked)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async void NotReadyToCreateTicketRequest()
    {
        // Display the message
        message = "Not able to create ticket. Fill all picking list.";

        // Wait for 5 seconds
        await Task.Delay(3000);

        // Clear the message
        message = string.Empty;

        // Notify the UI to update
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15).ReadAsync(buffer);

            var customFile = new CustomFile
            {
                FileName = selectedFile.Name,
                FileContent = buffer,
                ContentType = selectedFile.ContentType,
                //TicketId = 0 // Replace with the actual TicketId
            };

            // add file to ticket
            UserTicketVM.CustomFile = customFile;
        }

    }

    private void RollUpCustomFileTable()
    {
        isAddCustomFileTableVisible = false;
        isAddCustomFileButtonVisible = true;
    }

    private void RollUpNewTestTable()
    {
        isAddTestTableVisible = false;
        isAddNewTestButtonVisible = true;
    }


}