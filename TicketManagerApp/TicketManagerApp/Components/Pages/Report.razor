@page "/report/{id:int}"

@rendermode InteractiveServer

@using System.Diagnostics
@using TicketManager.Models.Models
@using TicketManagerApp.Services

@inject NavigationManager Navigation
@inject ITicketService _ticketService;
@inject IReportStructureService _reportStructureService;
@inject IServerDriveService _serverDriveService;
@inject IReportTypeService _reportTypeService;

<h3>Report</h3>

<div class="border-bottom border-white shadow rounded-lg" style="background-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Folder Name</th>
            <th>Files</th>
        </tr>
        <tbody>
            @if (FolderList.Count() == 0)
            {
                <p><em>No folders added.</em></p>
            }
            else
            {
                @foreach (var folder in FolderList)
                {
                    <tr>
                        <td>@folder</td>
                        <td>
                            <table class="table boarder table-hover">
                                <tbody>
                                    <tr>
                                        <td style="background-color: orange;">
                                            <InputFile OnChange="@(e => UploadFiles(e, folder))" />
                                        </td>
                                    </tr>
                                    @foreach (var (folderName, fileName) in FoldersAndFiles)
                                    {
                                        if (folderName == folder)
                                        {
                                            <tr>
                                                <td>@fileName </td>
                                                <td>
                                                    <button @onclick="() => OpenFile(folderName, fileName)">View</button>
                                                    <button @onclick="() => RemoveFile(folderName, fileName)">Remove</button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter]
    public int Id { get; set; } // ticket primary key

    private Ticket UserTicket = new();
    // ToDo : In future add Ticket Code Number to ticket model
    string DocumentCodeNumber;
    string ReportTypeShortDescription;

    private List<string> FolderList = new List<string>();
    private List<(string folderPath, string fileName)> FoldersAndFiles = new List<(string folderPath, string fileName)>();

    protected override async Task OnInitializedAsync()
    {
        UserTicket = await _ticketService.GetTicketBasicData(Id);
        ReportTypeShortDescription = await _reportTypeService.GetReportTypeById(UserTicket.ReportTypeId);
        FolderList = await _reportStructureService.GetReportFoldersStructureByReportTypeId(UserTicket.ReportTypeId);
        DocumentCodeNumber = SetDocumentCodeNumber(UserTicket, ReportTypeShortDescription);
        FoldersAndFiles = await _serverDriveService.GetListOfFilesInFolder(FolderList, DocumentCodeNumber);
    }

    // ToDo : In future add Ticket Code Number to ticket model
    private string SetDocumentCodeNumber(Ticket ticket, string reportTypeShortDescription)
    {
        string _documentCodeNumber;
        _documentCodeNumber = reportTypeShortDescription + ticket.TicketId;
        return _documentCodeNumber;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e, string targetFolder)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            string _documentCodeNumber = SetDocumentCodeNumber(UserTicket, ReportTypeShortDescription);
            var fileName = file.Name;
            var fileStream = file.OpenReadStream();
            await _serverDriveService.SaveFileToFolder(fileStream, fileName, targetFolder, _documentCodeNumber);
        }

        Navigation.NavigateTo($"/report/{Id}", forceLoad: true);
    }

    private void OpenFile(string folderName, string fileName)
    {
        string serverPath = _serverDriveService.GetServerPathToDatabaseFolder();
        string filePath = serverPath + DocumentCodeNumber + @"\" + folderName + @"\" + fileName;
        Process.Start(new ProcessStartInfo
            {
                FileName = filePath,
                UseShellExecute = true
            });
    }

    private async Task RemoveFile(string folderName, string fileName)
    {
        await _serverDriveService.DeleteFileFromFolder(fileName, folderName, DocumentCodeNumber);
        // Refresh page
        Navigation.NavigateTo($"/report/{Id}", forceLoad: true);
    }

}