@page "/marketticket"

<h3>MarketTicket</h3>


@rendermode InteractiveServer

@using System.Security.Claims
@using TicketManager.Models.Models
@using TicketManagerApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ITicketService TicketService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService _userService;

<h3>Tickets to addres</h3>

<!--
 List with picked active tickets
-->
<br>
<div class="border-bottom border-white shadow rounded-lg" style="background-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Requestor</th>
            <th>Lab location</th>
            <th>Product type</th>
            <th>Implemented at</th>
            <th>Responsible</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
        <tbody>
            @if (WaitingTicketsList == null || WaitingTicketsList.Count == 0)
            {
                <p><em>No waiting tickets found.</em></p>
            }
            else
                @foreach (var ticket in WaitingTicketsList)
                {
                    <tr>
                        <td>@ticket.RequestorEmail</td>
                        <td>@ticket.LabLocation.Country</td>
                        <td>@ticket.Product.ProductType.ProductTypeDesc</td>
                        <td>@ticket.ImplementedAt</td>
                        <td>@userEmailsInTickets[ticket.ResponsibleLabSpecialist]</td>
                        <td>@ticket.TicketStatus.StatusDescription</td>

                        <td>
                            <div class="form-group">
                                <button class="btn-secondary btn-info" @onclick="() => InfoTicket(ticket.TicketId)">Info</button>
                                <button class="btn-secondary btn-sm" @onclick="() => ClaimTicket(ticket.TicketId)">Claim</button>
                            </div>
                        </td>
                    </tr>
                }
        </tbody>
    </table>
</div>

@code {

    List<Ticket>? WaitingTicketsList;
    string? UserEmail;

    private Dictionary<Guid, string> userEmailsInTickets = new Dictionary<Guid, string>();

    Guid UserGuidId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        Guid.TryParse(userId, out UserGuidId);

        WaitingTicketsList = await TicketService.GetAllWaitingTickets();
        await GetUsersBaseOnTickets(WaitingTicketsList);
    }

    private async Task GetUsersBaseOnTickets(List<Ticket> tickets)
    {
        foreach (var ticket in WaitingTicketsList)
        {
            if (!userEmailsInTickets.ContainsKey(ticket.ResponsibleLabSpecialist))
            {
                string email;
                try
                {
                    email = await _userService.GetUserEmailByUserId(ticket.ResponsibleLabSpecialist);
                }
                catch (Exception ex)
                {
                    email = "N/a";
                }
                userEmailsInTickets[ticket.ResponsibleLabSpecialist] = email;
            }
        }
    }

    private void InfoTicket(int ticketId)
    {
        // ToDo: Code to navigate to page with ticket information
    }

    private async Task ClaimTicket(int ticketId)
    {
        try
        {
            await TicketService.UpdateClaimedTicket(UserGuidId, ticketId);
        }
        catch (Exception e)
        {
            // ToDo: write logger to rise exception information
        }
        Navigation.NavigateTo("/marketticket");
    }

}