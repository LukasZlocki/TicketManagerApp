@page "/yourtickets"

@rendermode InteractiveServer

@using System.Security.Claims
@using TicketManager.Models.Models
@using TicketManagerApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ITicketService TicketService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService _userService

<h3>Your Active Tickets</h3>

<!--
 List with picked active tickets
-->
<br>
<div class="border-bottom border-white shadow rounded-lg" style="background-color: #ededed">
    <table class="table table-striped boarder table-hover">
        <tr>
            <th>Ticket Nb</th>
            <th>Requestor</th>
            <th>Lab Location</th>
            <th>Product Type</th>
            <th>Implemented At</th>
            <th>Responsible Email</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
        <tbody>
            @if (UserActiveTickets == null || UserActiveTickets.Count == 0)
            {
                <p><em>No tickets found.</em></p>
            }
            else
                @foreach (var ticket in UserActiveTickets)
                {
                    <tr>
                        <td>T @ticket.TicketId</td>
                        <td>@ticket.RequestorEmail</td>
                        <td>@ticket.LabLocation.Country</td>
                        <td>@ticket.Product.ProductType.ProductTypeDesc</td>
                        <td>@ticket.Product.ProductFamily.FamilyDescription @ticket.Product.ProductType.ProductTypeDesc @ticket.Product.ProductDisplacement.Displacement</td>
                        <td>@ticket.ResponsibleEmail</td>
                        <td>@ticket.TicketStatus.StatusDescription</td>

                        <td>
                            <div class="form-group">
                                <button class="btn-secondary btn-info" @onclick="() => InfoTicket(ticket.TicketId)">Info</button>
                                <button class="btn-secondary btn-sm" @onclick="() => EditTicket(ticket.TicketId)">Edit</button>
                                <button class="btn-secondary btn-danger" @onclick="() => DeleteTicket(ticket.TicketId)">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
        </tbody>
    </table>
</div>

@code {

    List<Ticket>? UserActiveTickets;
    string? UserEmail;

    protected override async Task OnInitializedAsync()
    {
        // Retrive user data by user guid
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (Guid.TryParse(userId, out Guid _userGuid))
        {
            UserEmail = await _userService.GetUserEmailByUserId(_userGuid);
            UserActiveTickets = await TicketService.GetActiveTicketsByUserEmail(UserEmail);
        }
    }

    private void InfoTicket(int ticketId)
    {
        // Navigate to page with detailed ticket information
        Navigation.NavigateTo("/detailsticket/" + ticketId, true);
    }

    private void EditTicket(int ticketId)
    {
        Navigation.NavigateTo("/editticket/" + ticketId, true);
    }

    private async Task DeleteTicket(int ticketId)
    {
        try
        {
            await TicketService.DeleteTicketById(ticketId);
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
        catch (Exception e)
        {
            // ToDo: write logger to rise exception information
        }
    }

}
